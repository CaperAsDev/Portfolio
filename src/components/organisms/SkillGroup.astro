---
import { Icon } from "astro-icon/components";
import SkillCard from "@/components/molecules/SkillCard.astro";

type Item = {
  name: string;
  description: string;
  skillIcon: string;
  currentLevel: number;
  levels: Level[];
  experience: string;
};
type Colors = {
  "bg-clr1": string;
  "bg-clr2": string;
  "border-clr": string;
  "op-clr": string;
  "rise-clr": string;
};
type Level = {
  level: number;
  description: string;
};

interface Props {
  groupName: string;
  id: string;
  groupIcon: string;
  items: Item[];
  colors: Colors;
  description: string;
}

const { groupName, id, items, groupIcon, colors, description } = Astro.props;

const bgClr1 = colors["bg-clr1"];
const bgClr2 = colors["bg-clr2"];
const borderClr = colors["border-clr"];
const riseClr = colors["rise-clr"];
const opClr = colors["op-clr"];
---

<details data-description={description}>
  <summary>
    <Icon name={groupIcon} class={"icon"} />
    <p>
      {groupName}
    </p>
  </summary>
  <div class="cards-wrapper">
    {
      items.map((item) => (
        <SkillCard
          description={item.description}
          currentLevel={item.currentLevel}
          experience={item.experience}
          name={item.name}
          group={id}
          levels={item.levels}
        />
      ))
    }
  </div>
</details>

<style define:vars={{ bgClr1, bgClr2, borderClr, riseClr, opClr }}>
  @property --angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
  }

  details {
    height: fit-content;
    position: relative;
    display: grid;
    align-content: start;
    padding: 10px;
    background: conic-gradient(
      from var(--angle) at 50% -30%,
      transparent 10%,
      oklch(from var(--bgClr1) l c calc(h) / 0.15),
      oklch(from var(--bgClr1) l c calc(h + 20) / 0.15),
      oklch(from var(--bgClr1) l c calc(h - 20) / 0.15),
      transparent 90%
    );
    border-top: 2px solid;
    border-bottom: 2px solid;
    border-image: conic-gradient(
        from var(--angle),
        oklch(from var(--bgClr1) l c calc(h)),
        oklch(from var(--bgClr1) l c calc(h + 20)),
        oklch(from var(--bgClr1) l c calc(h - 20)),
        transparent 90%
      )
      1;
  }

  @media (prefers-reduced-motion: no-preference) {
    details {
      animation: turn 4s linear infinite;
    }
    @keyframes turn {
      to {
        --angle: 1turn;
      }
    }
  }

  summary {
    cursor: pointer;

    &:hover p {
      scale: 1.05;
    }
    p {
      color: oklch(from var(--borderClr) calc(l + 1) c h);
      transition: scale 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      font-weight: bold;
      text-align: center;
      text-wrap: pretty;
    }
  }

  .icon {
    --size: 2rem;
    position: absolute;
    inset: 0;
    top: calc(var(--size) * -1);
    height: var(--size);
    width: var(--size);
    padding: 2px;
    margin: 0 auto;
    background-color: oklch(from var(--borderClr) l c h / 0.5);
    border: 2px solid var(--borderClr);
    border-bottom: none;
    border-radius: 50% 50% 0 0;
    color: oklch(from var(--borderClr) calc(l - 0.5) calc(c) h);
  }

  .cards-wrapper {
    margin-block-start: 10px;
    display: grid;
    gap: 1rem;
    padding: 10px;
  }

  /* -------------show when sibling details is open */

  details::after {
    box-sizing: border-box;
    position: absolute;
    display: none;
    place-content: center;
    inset: 0;
    height: 100%;
    width: 100%;
    content: attr(data-description);
    font-size: var(--fs-s);
    font-family: "Comfortaa Variable";
    text-align: center;
    text-wrap: balance;
    padding: 10px;
    background: linear-gradient(
      to top,
      oklch(from rebeccapurple l c h / 0.5),
      transparent
    );
    mix-blend-mode: color-dodge;
  }

  @media screen and (width >= 1024px) {
    @container groups-wrapper (width >= 920px) {
      details {
        height: auto;
      }
      details[open] ~ details:not([open])::after,
      details:not([open]):has(~ details[open])::after {
        display: grid;
      }
    }
  }

  /* --------- dialogs reveal animation --------- */
  @media (prefers-reduced-motion: no-preference) {
    details::details-content {
      transition:
        all 0.3s ease,
        content-visibility 0.3s allow-discrete;
      height: 0;
      overflow: clip;
    }

    @supports (interpolate-size: allow-keywords) {
      :root {
        interpolate-size: allow-keywords;
      }

      [open]::details-content {
        height: auto;
      }
    }

    @supports not (interpolate-size: allow-keywords) {
      details::details-content {
        block-size: 0;
      }

      [open]::details-content {
        block-size: auto;
        block-size: calc-size(auto);
        height: 300px;
      }
    }
  }
</style>
