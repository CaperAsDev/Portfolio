---
import ButtonPopover from "@/components/atoms/ButtonPopover.astro";

type Level = {
  level: number;
  description: string;
};

interface Props {
  name: string;
  description: string;
  levels: Level[];
  group: string;
  currentLevel: number;
  experience: string;
}
const { name, description, levels, group, currentLevel, experience } =
  Astro.props;

const buttonAnchor = `--levels${name.split(" ")[0]}`;
const popoverBaseId = `--${group.split(" ")[0]}-${name.split(" ")[0]}`;
---

<div class="card-wrapper">
  <details name={group}>
    <summary>
      <p class="title">{name}</p>
    </summary>
    <div class="scene">
      <button class="card" aria-label="Flip the card" aria-pressed="false">
        <div class="face front">
          <p class="description">
            {description}
          </p>
        </div>
        <div class="face back">
          <p class="description">
            {experience}
          </p>
        </div>
      </button>
    </div>
  </details>
  <footer>
    <div class="absolute">soy absolute</div>
    <ButtonPopover
      buttonCustomClass={`lvl-${currentLevel} levels-menu star-button`}
      popoverCustomClass={`levels-container`}
      buttonAnchor={buttonAnchor}
      text={currentLevel.toString()}
    >
      <Fragment slot={"popover-content"}>
        {
          levels.map(({ level, description }) => (
            <ButtonPopover
              buttonAnchor={`${popoverBaseId}-${level}`}
              buttonCustomClass={`lvl-${level}`}
              popoverCustomClass={`levels-description lvl-${level}`}
              text={level.toString()}
            >
              <Fragment slot={"popover-content"}>
                <p>{description}</p>
              </Fragment>
            </ButtonPopover>
          ))
        }
      </Fragment>
    </ButtonPopover>
  </footer>
</div>
<style define:vars={{ buttonAnchor, popoverBaseId }}>
  @property --gradientAngle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
  }

  .card-wrapper {
    --border-width: 2px;
    position: relative;
    color: oklch(from var(--borderClr) calc(l - 0.6) calc(c + 0.1) h);
    overflow: hidden;
    border: 1.5px solid transparent;
    border-radius: 1rem;
    background-image: linear-gradient(transparent, transparent),
      conic-gradient(
        from var(--gradientAngle),
        transparent,
        oklch(from var(--bgClr1) calc(l + 0.1) c h),
        oklch(from var(--bgClr2) calc(l + 0.1) c h),
        oklch(from var(--borderClr) calc(l + 0.1) c h),
        oklch(from var(--riseClr) calc(l + 0.1) c h),
        oklch(from var(--opClr) calc(l + 0.1) c h),
        transparent
      );

    background-origin: border-box;
    background-clip: padding-box, border-box;
    box-shadow: 0px 0px 2px 2px
      oklch(from var(--bgClr1) calc(l - 0.1) calc(c + 0.05) h);
  }
  @media (prefers-reduced-motion: no-preference) {
    .card-wrapper {
      animation: borderTurn 6s linear infinite alternate;
    }

    @keyframes borderTurn {
      to {
        --gradientAngle: 1turn;
      }
    }
  }

  summary {
    position: relative;
    padding: 5px;
    border-radius: 1rem 1rem 0 0;
    background-color: var(--bgClr1);
    cursor: pointer;

    &:hover,
    &:focus {
      p {
        scale: 1.1;
      }
    }
    p {
      padding: 10px;
      transition: 0.5s cubic-bezier(0.19, 1, 0.22, 1);
      transition-property: scale;
    }

    .title {
      font-family: "Subjectivity";
      text-align: center;
    }
  }

  .description {
    font-family: "Comfortaa Variable";
    font-size: var(--fs-s);
    text-wrap: balance;
    text-align: center;
    padding: 5px;
  }

  footer {
    position: relative;
    width: 100%;
    display: grid;
    place-items: center;
    padding-bottom: 5px;
    border-radius: 0 0 1rem 1rem;
    background-color: var(--bgClr2);
    anchor-name: var(--buttonAnchor);
    container-type: inline-size;
    container-name: card-footer;

    .absolute {
      position: absolute;
      inset: 0;
    }
  }

  /* --------- dialogs reveal animation --------- */
  @media (prefers-reduced-motion: no-preference) {
    details::details-content {
      transition:
        all 0.3s ease,
        content-visibility 0.3s allow-discrete;
      height: 0;
      overflow: clip;
    }

    @supports (interpolate-size: allow-keywords) {
      :root {
        interpolate-size: allow-keywords;
      }

      [open]::details-content {
        height: auto;
      }
    }

    @supports not (interpolate-size: allow-keywords) {
      details::details-content {
        block-size: 0;
      }

      [open]::details-content {
        block-size: auto;
        block-size: calc-size(auto);
        height: 300px; /* In the future to be replaced by `height: auto` */
        overflow-y: scroll; /* In case the contents should be taller than 150px */
      }
    }
  }

  .scene {
    height: 300px;
    width: 100%;
    perspective: 1000px;
    display: grid;
    place-items: center;
    background: linear-gradient(
      to right,
      oklch(from var(--riseClr) calc(l - 0.1) calc(c + 0.05) h),
      oklch(from var(--riseClr) l c h) 50%,
      oklch(from var(--riseClr) calc(l - 0.1) calc(c + 0.05) h)
    );

    &::after {
      content: "!";
      position: absolute;
      top: 0;
      right: 0;
      display: grid;
      place-items: center;
      height: var(--fs-s);
      aspect-ratio: 1 / 1;
      transform: translate3d(-50%, 50%, 0);
      background-color: oklch(from var(--pink-400) l c h / 0.3);
      color: var(--pink-900);
      border-radius: 50%;
      outline: 1px solid var(--pink-400);
      mix-blend-mode: luminosity;
      pointer-events: none;
      opacity: 0.5;
      transition: opacity 0.5s ease-in;
    }

    &:hover {
      &::after {
        opacity: 1;
      }
    }
  }
  .card {
    width: 100%;
    height: 100%;
    position: relative;
    transition: transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.1);
    transform-style: preserve-3d;
    transform-origin: center right;
    background: none;
    outline: none;
    border: none;
    color: var(--pink-900);
    cursor: pointer;

    &:focus,
    &:hover {
      outline: 1px solid white;
    }
  }

  .face {
    position: absolute;
    inset: 0;
    height: 100%;
    width: 100%;
    display: grid;
    place-items: center;
    padding: 10px;
    backface-visibility: hidden;
  }
  .face.front {
    background-color: oklch(from rgb(47, 0, 255) l c h / 0.1);
  }
  .face.back {
    background-color: oklch(from rgb(255, 0, 255) l c h / 0.1);
    transform: rotateY(180deg);
  }
  .card.is-flipped {
    transform: translateX(-100%) rotateY(-180deg);
  }
</style>
