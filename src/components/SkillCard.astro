---
import { Icon } from "astro-icon/components";

type Level = {
  level: number;
  description: string;
};

interface Props {
  name: string;
  description: string;
  levels?: Level[];
  group?: string;
  currentLevel: number;
  skillIcon: string;
  groupIcon: string;
}
const { name, description, levels, group, currentLevel, skillIcon, groupIcon } =
  Astro.props;
---

<div class="card-wrapper">
  <details name={group}>
    <summary>
      <div class="card-icon">
        <Icon name={skillIcon} />
      </div>
      <p class="title">{name}</p>
    </summary>
    <div class="scene">
      <div class="card">
        <div class="face front">
          <p class="description">
            {description}
          </p>
        </div>
        <div class="face back">
          <p class="description">
            Texto de atras de referencia, aqui va a ir una descripcion de como
            logre adquirir la habilidad y sus aplicaciones practicas.
          </p>
        </div>
      </div>
    </div>
  </details>
  <footer>
    <button popovertarget="levelsMenu">{currentLevel}</button>
    <div id="levelsMenu" popover></div>
    <div class="group-icon">
      <div class="icon-wrapper">
        <Icon name={groupIcon} />
      </div>
    </div>
  </footer>
</div>
<style>
  .card-wrapper {
    --border-width: 2px;

    border-radius: 1rem;
    border-top: var(--border-width) solid var(--borderClr);
    border-bottom: var(--border-width) solid var(--borderClr);
    color: oklch(from var(--borderClr) calc(l - 0.6) calc(c + 0.1) h);
  }

  summary {
    position: relative;
    padding: 5px;
    border-right: var(--border-width) solid var(--borderClr);
    border-top-right-radius: 1rem;
    border-left: var(--border-width) solid var(--borderClr);
    border-top-left-radius: 1rem;
    background-color: var(--bgClr1);

    &:hover {
      cursor: pointer;
    }
    p {
      padding: 10px;
    }

    .card-icon {
      position: absolute;
      z-index: 5;
      width: 50px;
      height: 50px;
      bottom: -50%;
      left: -2px;
      padding: 0 5px 5px 0;
      border-bottom-right-radius: 50%;
      background-color: var(--bgClr1);
      border-left: var(--border-width) solid var(--borderClr);

      svg {
        height: 100%;
        width: 100%;
      }
    }
    .title {
      font-family: "Subjectivity";
      text-align: end;
    }
  }
  .description {
    font-family: "Comfortaa Variable";
    font-size: var(--fs-s);
    text-wrap: balance;
    text-align: center;
    padding: 5px;
  }

  footer {
    position: relative;
    width: 100%;
    display: grid;
    place-items: center;
    padding-bottom: 5px;
    border-bottom-right-radius: 1rem;
    border-bottom-left-radius: 1rem;
    border-right: var(--border-width) solid var(--borderClr);
    border-left: var(--border-width) solid var(--borderClr);
    background-color: var(--bgClr2);

    button {
      width: 50px;
      height: 50px;
      display: grid;
      place-items: center;
      border-radius: 50%;
    }

    .group-icon {
      position: absolute;
      width: 40px;
      height: 40px;
      right: 0px;
      bottom: 3px;

      &::after {
        position: absolute;
        content: "";
        width: 100%;
        height: 50%;
        background-color: var(--riseClr);
        border-top-left-radius: 100%;
        right: 99%;
        bottom: -3px;
      }
      &::before {
        position: absolute;
        content: "";
        width: 50%;
        height: 100%;
        background-color: var(--riseClr);
        border-top-left-radius: 100%;
        border-right: var(--border-width) solid var(--borderClr);
        right: -2px;
        top: -99%;
      }
    }
    .icon-wrapper {
      padding: 4px 2px 2px 4px;
      background-color: var(--riseClr);
      border-radius: 1rem 0;
      border-bottom: var(--border-width) solid var(--borderClr);

      svg {
        width: 100%;
        height: 100%;
      }
    }
  }
  /* --------- dialogs reveal animation --------- */
  @media (prefers-reduced-motion: no-preference) {
    details::details-content {
      transition:
        all 0.3s ease,
        content-visibility 0.3s allow-discrete;
      height: 0;
      overflow: clip;
    }

    @supports (interpolate-size: allow-keywords) {
      :root {
        interpolate-size: allow-keywords;
      }

      [open]::details-content {
        height: auto;
      }
    }

    @supports not (interpolate-size: allow-keywords) {
      details::details-content {
        block-size: 0;
      }

      [open]::details-content {
        block-size: auto;
        block-size: calc-size(auto);
        height: 300px; /* In the future to be replaced by `height: auto` */
        overflow-y: scroll; /* In case the contents should be taller than 150px */
      }
    }
  }

  .scene {
    height: 300px;
    width: 100%;
    perspective: 1000px;
    display: grid;
    place-items: center;
    background: linear-gradient(
      to right,
      oklch(from var(--riseClr) calc(l - 0.1) calc(c + 0.05) h),
      oklch(from var(--riseClr) l c h) 50%,
      oklch(from var(--riseClr) calc(l - 0.1) calc(c + 0.05) h)
    );
  }
  .card {
    width: 100%;
    height: 100%;
    position: relative;
    transition: transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.1);
    transform-style: preserve-3d;
    transform-origin: center right;
  }
  .face {
    padding: 10px;
    display: grid;
    place-items: center;
    position: absolute;
    height: 100%;
    width: 100%;
    backface-visibility: hidden;
  }
  .face.front {
    background-color: oklch(from rgb(47, 0, 255) l c h / 0.1);
  }
  .face.back {
    background-color: oklch(from rgb(255, 0, 255) l c h / 0.1);
    transform: rotateY(180deg);
  }
  .card.is-flipped {
    transform: translateX(-100%) rotateY(-180deg);
  }
</style>
